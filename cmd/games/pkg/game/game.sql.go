// Code generated by qtc from "game.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package game

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func streamqryGameInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO games ( id, type, updatedOn, isActive, serialized ) VALUES ( ?, ?, ?, 1, ? ) `)
}

func writeqryGameInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryGameInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryGameInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryGameInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryGameUpdate(qw422016 *qt422016.Writer) {
	qw422016.N().S(`UPDATE games Set updatedOn=?, isActive=?, serialized=? WHERE id=? AND type=? `)
}

func writeqryGameUpdate(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryGameUpdate(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryGameUpdate() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryGameUpdate(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryGameGet(qw422016 *qt422016.Writer, forUpdate bool) {
	qw422016.N().S(`SELECT type, serialized FROM games WHERE id=? `)
	if forUpdate {
		qw422016.N().S(`FOR UPDATE `)
	}
}

func writeqryGameGet(qq422016 qtio422016.Writer, forUpdate bool) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryGameGet(qw422016, forUpdate)
	qt422016.ReleaseWriter(qw422016)
}

func qryGameGet(forUpdate bool) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryGameGet(qb422016, forUpdate)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryGameGetActive(qw422016 *qt422016.Writer, forUpdate bool) {
	qw422016.N().S(`SELECT g.type, g.serialized FROM games g INNER JOIN players p ON p.game=g.id WHERE p.id=? AND g.isActive=1 `)
	if forUpdate {
		qw422016.N().S(`FOR UPDATE `)
	}
}

func writeqryGameGetActive(qq422016 qtio422016.Writer, forUpdate bool) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryGameGetActive(qw422016, forUpdate)
	qt422016.ReleaseWriter(qw422016)
}

func qryGameGetActive(forUpdate bool) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryGameGetActive(qb422016, forUpdate)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryGameDeleteExpired(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM games WHERE updatedOn<? `)
}

func writeqryGameDeleteExpired(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryGameDeleteExpired(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryGameDeleteExpired() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryGameDeleteExpired(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryPlayerInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO players ( id, game ) VALUES ( ?, ? ) `)
}

func writeqryPlayerInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryPlayerInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryPlayerInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryPlayerInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
