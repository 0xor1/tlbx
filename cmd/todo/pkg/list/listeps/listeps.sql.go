// Code generated by qtc from "listeps.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package listeps

import . "github.com/0xor1/tlbx/pkg/core"

import "github.com/0xor1/tlbx/pkg/ptr"

import "github.com/0xor1/tlbx/pkg/sqlh"

import "github.com/0xor1/tlbx/cmd/todo/pkg/list"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func streamqryListInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO lists ( user, id, createdOn, name, todoItemCount, completedItemCount ) VALUES ( ?, ?, ?, ?, ?, ? ) `)
}

func writeqryListInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryListInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryListInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryListInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryListUpdate(qw422016 *qt422016.Writer) {
	qw422016.N().S(`UPDATE lists SET name=? WHERE user=? AND id=? `)
}

func writeqryListUpdate(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryListUpdate(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryListUpdate() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryListUpdate(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryListsDelete(qw422016 *qt422016.Writer, n int) {
	qw422016.N().S(`DELETE FROM lists WHERE user=? AND id IN (`)
	qw422016.E().S(sqlh.PList(n))
	qw422016.N().S(`) `)
}

func writeqryListsDelete(qq422016 qtio422016.Writer, n int) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryListsDelete(qw422016, n)
	qt422016.ReleaseWriter(qw422016)
}

func qryListsDelete(n int) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryListsDelete(qb422016, n)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryOnDelete(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM lists WHERE user=? `)
}

func writeqryOnDelete(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryOnDelete(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryOnDelete() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryOnDelete(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryListsGet(qw422016 *qt422016.Writer, sqlArgs *sqlh.Args, me ID, args *list.Get) {
	qw422016.N().S(`SELECT id, createdOn, name, todoItemCount, completedItemCount FROM lists WHERE user=? `)
	sqlArgs.Append(me)

	if len(args.Base.IDs) > 0 {
		qw422016.N().S(`AND id IN (`)
		qw422016.E().S(sqlh.PList(len(args.Base.IDs)))
		qw422016.N().S(`) ORDER BY FIELD (id,`)
		qw422016.E().S(sqlh.PList(len(args.Base.IDs)))
		qw422016.N().S(`) `)
		is := args.Base.IDs.ToIs()
		sqlArgs.Append(is...)
		sqlArgs.Append(is...)

	} else {
		if ptr.StringOr(args.NamePrefix, "") != "" {
			qw422016.N().S(`AND name LIKE ? `)
			sqlArgs.Append(Strf("%s%%", *args.NamePrefix))

		}
		if args.CreatedOnMin != nil {
			qw422016.N().S(`AND createdOn >= ? `)
			sqlArgs.Append(*args.CreatedOnMin)

		}
		if args.CreatedOnMax != nil {
			qw422016.N().S(`AND createdOn <= ? `)
			sqlArgs.Append(*args.CreatedOnMax)

		}
		if args.TodoItemCountMin != nil {
			qw422016.N().S(`AND todoItemCount >= ? `)
			sqlArgs.Append(*args.TodoItemCountMin)

		}
		if args.TodoItemCountMax != nil {
			qw422016.N().S(`AND todoItemCount <= ? `)
			sqlArgs.Append(*args.TodoItemCountMax)

		}
		if args.Base.After != nil {
			qw422016.N().S(`AND `)
			qw422016.E().S(string(args.Base.Sort))
			qw422016.N().S(` `)
			qw422016.N().S(sqlh.GtLtSymbol(*args.Base.Asc))
			qw422016.N().S(`= (SELECT `)
			qw422016.E().S(string(args.Base.Sort))
			qw422016.N().S(` FROM lists WHERE user=? AND id=?) AND id <> ? `)
			sqlArgs.Append(me, *args.Base.After, *args.Base.After)

			if args.Base.Sort != list.SortCreatedOn {
				qw422016.N().S(`AND createdOn `)
				qw422016.N().S(sqlh.GtLtSymbol(*args.Base.Asc))
				qw422016.N().S(` (SELECT createdOn FROM lists WHERE user=? AND id=?) `)
				sqlArgs.Append(me, *args.Base.After)

			}
		}
		qw422016.N().S(`ORDER BY `)
		qw422016.E().S(string(args.Base.Sort))
		qw422016.N().S(` `)
		if args.Base.Sort != list.SortCreatedOn {
			qw422016.N().S(`, createdOn `)
		}
		qw422016.E().S(sqlh.Asc(*args.Base.Asc))
		qw422016.N().S(` LIMIT `)
		qw422016.N().D(int(sqlh.Limit100(args.Base.Limit)))
		qw422016.N().S(` `)
	}
}

func writeqryListsGet(qq422016 qtio422016.Writer, sqlArgs *sqlh.Args, me ID, args *list.Get) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryListsGet(qw422016, sqlArgs, me, args)
	qt422016.ReleaseWriter(qw422016)
}

func qryListsGet(sqlArgs *sqlh.Args, me ID, args *list.Get) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryListsGet(qb422016, sqlArgs, me, args)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
