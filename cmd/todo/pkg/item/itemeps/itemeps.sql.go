// Code generated by qtc from "itemeps.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package itemeps

import "time"

import . "github.com/0xor1/tlbx/pkg/core"

import "github.com/0xor1/tlbx/pkg/ptr"

import "github.com/0xor1/tlbx/pkg/sqlh"

import "github.com/0xor1/tlbx/cmd/todo/pkg/item"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func streamqryItemInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO items ( user, list, id, createdOn, name, completedOn ) VALUES ( ?, ?, ?, ?, ?, ? ) `)
}

func writeqryItemInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryItemInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryItemInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryItemInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryIncrementListItemCount(qw422016 *qt422016.Writer) {
	qw422016.N().S(`UPDATE lists SET todoItemCount = todoItemCount + 1 WHERE user=? AND id=? `)
}

func writeqryIncrementListItemCount(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryIncrementListItemCount(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryIncrementListItemCount() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryIncrementListItemCount(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryItemUpdate(qw422016 *qt422016.Writer) {
	qw422016.N().S(`UPDATE items SET name=?, completedOn=? WHERE user=? AND list=? AND id=? `)
}

func writeqryItemUpdate(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryItemUpdate(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryItemUpdate() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryItemUpdate(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryListCountsToggle(qw422016 *qt422016.Writer, completed bool) {
	qw422016.N().S(`UPDATE lists SET todoItemCount = todoItemCount`)
	if completed {
		qw422016.N().S(`-`)
	} else {
		qw422016.N().S(`+`)
	}
	qw422016.N().S(`1, completedItemCount = completedItemCount`)
	if completed {
		qw422016.N().S(`+`)
	} else {
		qw422016.N().S(`-`)
	}
	qw422016.N().S(`1 WHERE user=? AND id=? `)
}

func writeqryListCountsToggle(qq422016 qtio422016.Writer, completed bool) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryListCountsToggle(qw422016, completed)
	qt422016.ReleaseWriter(qw422016)
}

func qryListCountsToggle(completed bool) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryListCountsToggle(qb422016, completed)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryItemsDelete(qw422016 *qt422016.Writer, n int) {
	qw422016.N().S(`DELETE FROM items WHERE user=? AND list=? AND id IN (`)
	qw422016.E().S(sqlh.PList(n))
	qw422016.N().S(`) `)
}

func writeqryItemsDelete(qq422016 qtio422016.Writer, n int) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryItemsDelete(qw422016, n)
	qt422016.ReleaseWriter(qw422016)
}

func qryItemsDelete(n int) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryItemsDelete(qb422016, n)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryListRecalculateCounts(qw422016 *qt422016.Writer) {
	qw422016.N().S(`UPDATE lists SET todoItemCount = ( SELECT COUNT(id) FROM items WHERE user=? AND list=? AND completedOn=? ), completedItemCount = ( SELECT COUNT(id) FROM items WHERE user=? AND list=? AND completedOn<>? ) WHERE user=? AND id=? `)
}

func writeqryListRecalculateCounts(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryListRecalculateCounts(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryListRecalculateCounts() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryListRecalculateCounts(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryItemsGet(qw422016 *qt422016.Writer, sqlArgs *sqlh.Args, me ID, args *item.Get) {
	qw422016.N().S(`SELECT id, createdOn, name, completedOn FROM items WHERE user=? AND list=? `)
	if len(args.IDs) > 0 {
		*sqlArgs = *sqlh.NewArgs((len(args.IDs) * 2) + 3)
	} else {
		*sqlArgs = *sqlh.NewArgs(20)
	}
	sqlArgs.Append(me)
	sqlArgs.Append(args.List)

	if len(args.IDs) > 0 {
		qw422016.N().S(`AND id IN (`)
		qw422016.E().S(sqlh.PList(len(args.IDs)))
		qw422016.N().S(`) ORDER BY FIELD (id,`)
		qw422016.E().S(sqlh.PList(len(args.IDs)))
		qw422016.N().S(`) `)
		is := args.IDs.ToIs()
		sqlArgs.Append(is...)
		sqlArgs.Append(is...)

	} else {
		sqlArgs.Append(time.Time{})

		qw422016.N().S(`AND completedOn `)
		if ptr.BoolOr(args.Completed, false) {
			qw422016.N().S(`<>? `)
			if args.CompletedOnMin != nil {
				qw422016.N().S(`AND completedOn >= ? `)
				sqlArgs.Append(*args.CompletedOnMin)

			}
			if args.CompletedOnMax != nil {
				qw422016.N().S(`AND completedOn <= ? `)
				sqlArgs.Append(*args.CompletedOnMax)

			}
		} else {
			qw422016.N().S(`=? `)
		}
		if ptr.StringOr(args.NamePrefix, "") != "" {
			qw422016.N().S(`AND name LIKE ? `)
			sqlArgs.Append(Strf("%s%%", *args.NamePrefix))

		}
		if args.CreatedOnMin != nil {
			qw422016.N().S(`AND createdOn >= ? `)
			sqlArgs.Append(*args.CreatedOnMin)

		}
		if args.CreatedOnMax != nil {
			qw422016.N().S(`AND createdOn <= ? `)
			sqlArgs.Append(*args.CreatedOnMax)

		}
		if args.After != nil {
			qw422016.N().S(`AND `)
			qw422016.E().S(string(args.Sort))
			qw422016.N().S(` `)
			qw422016.N().S(sqlh.GtLtSymbol(*args.Asc))
			qw422016.N().S(`= (SELECT `)
			qw422016.E().S(string(args.Sort))
			qw422016.N().S(` FROM items WHERE user=? AND list=? AND id=?) AND id <> ? `)
			sqlArgs.Append(me, args.List, *args.After, *args.After)

			if args.Sort != item.SortCreatedOn {
				qw422016.N().S(`AND createdOn `)
				qw422016.N().S(sqlh.GtLtSymbol(*args.Asc))
				qw422016.N().S(` (SELECT createdOn FROM items WHERE user=? AND list=? AND id=?) `)
				sqlArgs.Append(me, args.List, *args.After)

			}
		}
		qw422016.N().S(`ORDER BY `)
		qw422016.E().S(string(args.Sort))
		qw422016.N().S(` `)
		if args.Sort != item.SortCreatedOn {
			qw422016.N().S(`, createdOn `)
		}
		qw422016.E().S(sqlh.Asc(*args.Asc))
		qw422016.N().S(` LIMIT `)
		qw422016.N().D(int(sqlh.Limit100(args.Limit)))
		qw422016.N().S(` `)
	}
}

func writeqryItemsGet(qq422016 qtio422016.Writer, sqlArgs *sqlh.Args, me ID, args *item.Get) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryItemsGet(qw422016, sqlArgs, me, args)
	qt422016.ReleaseWriter(qw422016)
}

func qryItemsGet(sqlArgs *sqlh.Args, me ID, args *item.Get) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryItemsGet(qb422016, sqlArgs, me, args)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
