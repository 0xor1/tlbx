// Code generated by qtc from "usereps.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package usereps

import "github.com/0xor1/tlbx/pkg/sqlh"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func streamqryUserFullGet(qw422016 *qt422016.Writer, byID bool) {
	qw422016.N().S(`SELECT id, email, handle, alias, hasAvatar, fcmEnabled, registeredOn, activatedOn, newEmail, activateCode, changeEmailCode, lastPwdResetOn, loginLinkCodeCreatedOn, loginLinkCode FROM users WHERE `)
	if byID {
		qw422016.N().S(`id `)
	} else {
		qw422016.N().S(`email `)
	}
	qw422016.N().S(`=? `)
}

func writeqryUserFullGet(qq422016 qtio422016.Writer, byID bool) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryUserFullGet(qw422016, byID)
	qt422016.ReleaseWriter(qw422016)
}

func qryUserFullGet(byID bool) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryUserFullGet(qb422016, byID)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryUserUpdate(qw422016 *qt422016.Writer) {
	qw422016.N().S(`UPDATE users SET email=?, handle=?, alias=?, hasAvatar=?, fcmEnabled=?, registeredOn=?, activatedOn=?, newEmail=?, activateCode=?, changeEmailCode=?, lastPwdResetOn=?, loginLinkCodeCreatedOn=?, loginLinkCode=? WHERE id=? `)
}

func writeqryUserUpdate(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryUserUpdate(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryUserUpdate() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryUserUpdate(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryUserInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO users ( id, email, handle, alias, hasAvatar, fcmEnabled, registeredOn, activatedOn, activateCode ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) `)
}

func writeqryUserInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryUserInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryUserInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryUserInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryUserDelete(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM users WHERE id=? `)
}

func writeqryUserDelete(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryUserDelete(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryUserDelete() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryUserDelete(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryUsersGet(qw422016 *qt422016.Writer, n int) {
	qw422016.N().S(`SELECT id, handle, alias, hasAvatar FROM users WHERE id IN (`)
	qw422016.E().S(sqlh.PList(n))
	qw422016.N().S(`) `)
}

func writeqryUsersGet(qq422016 qtio422016.Writer, n int) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryUsersGet(qw422016, n)
	qt422016.ReleaseWriter(qw422016)
}

func qryUsersGet(n int) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryUsersGet(qb422016, n)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryPwdDelete(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM pwds WHERE id=? `)
}

func writeqryPwdDelete(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryPwdDelete(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryPwdDelete() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryPwdDelete(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryPwdGet(qw422016 *qt422016.Writer) {
	qw422016.N().S(`SELECT id, salt, pwd, n, r, p FROM pwds WHERE id=? `)
}

func writeqryPwdGet(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryPwdGet(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryPwdGet() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryPwdGet(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryPwdUpdate(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO pwds ( id, salt, pwd, n, r, p ) VALUES ( ?, ?, ?, ?, ?, ? ) ON DUPLICATE KEY UPDATE salt=VALUE(salt), pwd=VALUE(pwd), n=VALUE(n), r=VALUE(r), p=VALUE(p) `)
}

func writeqryPwdUpdate(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryPwdUpdate(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryPwdUpdate() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryPwdUpdate(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryFifthOldestTokenCreatedOn(qw422016 *qt422016.Writer) {
	qw422016.N().S(`SELECT createdOn FROM fcmTokens WHERE user=? ORDER BY createdOn DESC LIMIT 4, 1 `)
}

func writeqryFifthOldestTokenCreatedOn(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryFifthOldestTokenCreatedOn(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryFifthOldestTokenCreatedOn() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryFifthOldestTokenCreatedOn(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryFCMTokensDeleteOldest(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM fcmTokens WHERE user=? AND createdOn<=? `)
}

func writeqryFCMTokensDeleteOldest(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryFCMTokensDeleteOldest(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryFCMTokensDeleteOldest() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryFCMTokensDeleteOldest(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryFCMTokenInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO fcmTokens ( topic, token, user, client, createdOn ) VALUES ( ?, ?, ?, ?, ? ) ON DUPLICATE KEY UPDATE topic=VALUES(topic), token=VALUES(token), user=VALUES(user), client=VALUES(client), createdOn=VALUES(createdOn) `)
}

func writeqryFCMTokenInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryFCMTokenInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryFCMTokenInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryFCMTokenInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryDistinctFCMTokens(qw422016 *qt422016.Writer) {
	qw422016.N().S(`SELECT DISTINCT token FROM fcmTokens WHERE user=? `)
}

func writeqryDistinctFCMTokens(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryDistinctFCMTokens(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryDistinctFCMTokens() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryDistinctFCMTokens(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryFCMTokensDelete(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM fcmTokens WHERE user=? `)
}

func writeqryFCMTokensDelete(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryFCMTokensDelete(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryFCMTokensDelete() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryFCMTokensDelete(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryFCMUnregister(qw422016 *qt422016.Writer) {
	qw422016.N().S(`DELETE FROM fcmTokens WHERE user=? AND client=? `)
}

func writeqryFCMUnregister(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryFCMUnregister(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryFCMUnregister() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryFCMUnregister(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryJinInsert(qw422016 *qt422016.Writer) {
	qw422016.N().S(`INSERT INTO jin( user, val ) VALUES ( ?, ? ) ON DUPLICATE KEY UPDATE val=VALUES(val) `)
}

func writeqryJinInsert(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryJinInsert(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryJinInsert() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryJinInsert(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryJinSelect(qw422016 *qt422016.Writer) {
	qw422016.N().S(`SELECT val FROM jin WHERE user=? `)
}

func writeqryJinSelect(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryJinSelect(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryJinSelect() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryJinSelect(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamqryJinDelete(qw422016 *qt422016.Writer) {
	qw422016.N().S(`Delete FROM jin WHERE user=? `)
}

func writeqryJinDelete(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamqryJinDelete(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func qryJinDelete() string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeqryJinDelete(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
